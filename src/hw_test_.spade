use lib::main::OutputPins;
use lib::main::Output;
use lib::main::Timing;
use lib::main::display_gen;
use lib::main::output_translator;

entity top(clk: clock, rst: bool) -> OutputPins {
    let one: int<2> = 1;
    let t = Timing$(
        us1: 12,
        us3: 36,
        mhz1: 6
    );

    let display_signals = inst display_gen(clk, rst, t);

    reg(clk) slow_timer: int<32> reset(rst: 0) = if slow_timer == 1_200_000 {
        0
    }
    else {
        let slow_timer_: int<33> = slow_timer + one;
        let slow_timer_: int<32> = trunc(slow_timer_);
        slow_timer_
    };

    reg(clk) offset: int<10> reset(rst: 0) = if slow_timer == 0 {
        let offset_: int<11> = offset + one;
        let offset_: int<10> = trunc(offset);
        offset_
    } else {
        offset
    };

    let with_pixels = match display_signals.o {
        Output::UpdateMode => Output::UpdateMode(),
        Output::FrameInv(v) => Output::FrameInv(v),
        Output::AllClear => Output::AllClear(),
        Output::Dummy => Output::Dummy(),
        Output::Address(v) => Output::Address(v),
        Output::Pixel((x, y)) => {
            // Changed
            Output::Pixel(x == (y + one))
        },
        Output::CsHigh => Output::CsHigh(),
        Output::CsLow => Output::CsLow(),
    };

    output_translator(with_pixels, display_signals.sclk)
}
